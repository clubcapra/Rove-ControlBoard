
#ifndef API_H
#define API_H
#pragma once
/* This was generated by capra_micro_comm.
* DO NOT EDIT
*/

#include <capra_comm.h>

enum StatusCode : euint32_t
{
    STNone = 0,
};

enum ErrorCode : euint32_t
{
    ERNone = 0,
    ERAdapterNotInit = 1,
    ERServoXNACK = 2,
    ERServoYNACK = 4,
};

enum ServoControlMode : euint32_t
{
    SCMNone = 0,
    SCMPosition = 1,
    SCMSpeed = 2,
};




// --- STRUCTS ---
struct Void
{
    euint8_t pad0;
};
static_assert(sizeof(Void) == 1);

struct Bool_
{
    eboolean_t b;
};
static_assert(sizeof(Bool_) == 1);

struct Byte
{
    euint8_t b;
};
static_assert(sizeof(Byte) == 1);

struct Short
{
    eint16_t s;
};
static_assert(sizeof(Short) == 2);

struct UShort
{
    euint16_t s;
};
static_assert(sizeof(UShort) == 2);

struct Int
{
    eint32_t i;
};
static_assert(sizeof(Int) == 4);

struct UInt
{
    euint32_t i;
};
static_assert(sizeof(UInt) == 4);

struct Long
{
    eint64_t l;
};
static_assert(sizeof(Long) == 8);

struct ULong
{
    euint64_t l;
};
static_assert(sizeof(ULong) == 8);

struct Float
{
    efloat_t f;
};
static_assert(sizeof(Float) == 4);

struct Vector2D
{
    eint32_t x;
    eint32_t y;
};
static_assert(sizeof(Vector2D) == 8);

struct RGB
{
    euint8_t r;
    euint8_t g;
    euint8_t b;
};
static_assert(sizeof(RGB) == 3);

struct Report
{
    Vector2D pos;
    euint32_t statusCode;
    euint32_t errorCode;
};
static_assert(sizeof(Report) == 16);

struct Bounds
{
    efloat_t lower;
    efloat_t upper;
};
static_assert(sizeof(Bounds) == 8);

// --- COMMANDS ---
Bool_ setServoPosition(Vector2D);
static_assert((sizeof(Vector2D)+1) == 9);

Vector2D getServoPosition(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setServoPositionZero(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setServoSpeed(Vector2D);
static_assert((sizeof(Vector2D)+1) == 9);

Vector2D getServoSpeed(Void);
static_assert((sizeof(Void)+1) == 2);

Int getServoPositionX(Void);
static_assert((sizeof(Void)+1) == 2);

Int getServoPositionY(Void);
static_assert((sizeof(Void)+1) == 2);

Int getServoSpeedX(Void);
static_assert((sizeof(Void)+1) == 2);

Int getServoSpeedY(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setServoXAcc(Byte);
static_assert((sizeof(Byte)+1) == 2);

Bool_ setServoYAcc(Byte);
static_assert((sizeof(Byte)+1) == 2);

Byte getServoXAcc(Void);
static_assert((sizeof(Void)+1) == 2);

Byte getServoYAcc(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ setLEDFront(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ setLEDBack(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ setLEDStrobe(Bool_);
static_assert((sizeof(Bool_)+1) == 2);

Bool_ getLEDFront(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ getLEDBack(Void);
static_assert((sizeof(Void)+1) == 2);

Bool_ getLEDStrobe(Void);
static_assert((sizeof(Void)+1) == 2);

Report getReport(Void);
static_assert((sizeof(Void)+1) == 2);

static BaseFunction_ptr commands[] = {
    new Function<Bool_, Vector2D>(&setServoPosition),
    new Function<Vector2D, Void>(&getServoPosition),
    new Function<Bool_, Void>(&setServoPositionZero),
    new Function<Bool_, Vector2D>(&setServoSpeed),
    new Function<Vector2D, Void>(&getServoSpeed),
    new Function<Int, Void>(&getServoPositionX),
    new Function<Int, Void>(&getServoPositionY),
    new Function<Int, Void>(&getServoSpeedX),
    new Function<Int, Void>(&getServoSpeedY),
    new Function<Bool_, Byte>(&setServoXAcc),
    new Function<Bool_, Byte>(&setServoYAcc),
    new Function<Byte, Void>(&getServoXAcc),
    new Function<Byte, Void>(&getServoYAcc),
    new Function<Bool_, Bool_>(&setLEDFront),
    new Function<Bool_, Bool_>(&setLEDBack),
    new Function<Bool_, Bool_>(&setLEDStrobe),
    new Function<Bool_, Void>(&getLEDFront),
    new Function<Bool_, Void>(&getLEDBack),
    new Function<Bool_, Void>(&getLEDStrobe),
    new Function<Report, Void>(&getReport),
};
#define COMMANDS_COUNT 20
#define MAX_DECODED_SIZE 17
#define MAX_ENCODED_SIZE 25

#endif // API_H