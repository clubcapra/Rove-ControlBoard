/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_BRIDGE_PB_H_INCLUDED
#define PB_BRIDGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _StatusCode {
    StatusCode_SC_IDLE = 0,
    StatusCode_SC_SUCCESS = 1,
    StatusCode_SC_FAILED = 2
} StatusCode;

typedef enum _TPVMode {
    TPVMode_TPV_VELOCITY = 0,
    TPVMode_TPV_POSITION = 1
} TPVMode;

/* Struct definitions */
typedef struct _Color {
    float R;
    float G;
    float B;
} Color;

typedef struct _RotationXY {
    float X;
    float Y;
} RotationXY;

typedef struct _DataFrameRequest {
    bool has_rgb;
    Color rgb;
    bool frontLight;
    bool backLight;
    TPVMode tpvMode;
    bool has_tpvRotationVelocity;
    RotationXY tpvRotationVelocity;
    bool has_tpvRotationAngle;
    RotationXY tpvRotationAngle;
} DataFrameRequest;

typedef struct _DataFrameResponse {
    StatusCode status;
    bool has_tpvAngle;
    RotationXY tpvAngle;
} DataFrameResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _StatusCode_MIN StatusCode_SC_IDLE
#define _StatusCode_MAX StatusCode_SC_FAILED
#define _StatusCode_ARRAYSIZE ((StatusCode)(StatusCode_SC_FAILED+1))

#define _TPVMode_MIN TPVMode_TPV_VELOCITY
#define _TPVMode_MAX TPVMode_TPV_POSITION
#define _TPVMode_ARRAYSIZE ((TPVMode)(TPVMode_TPV_POSITION+1))



#define DataFrameRequest_tpvMode_ENUMTYPE TPVMode

#define DataFrameResponse_status_ENUMTYPE StatusCode


/* Initializer values for message structs */
#define Color_init_default                       {0, 0, 0}
#define RotationXY_init_default                  {0, 0}
#define DataFrameRequest_init_default            {false, Color_init_default, 0, 0, _TPVMode_MIN, false, RotationXY_init_default, false, RotationXY_init_default}
#define DataFrameResponse_init_default           {_StatusCode_MIN, false, RotationXY_init_default}
#define Color_init_zero                          {0, 0, 0}
#define RotationXY_init_zero                     {0, 0}
#define DataFrameRequest_init_zero               {false, Color_init_zero, 0, 0, _TPVMode_MIN, false, RotationXY_init_zero, false, RotationXY_init_zero}
#define DataFrameResponse_init_zero              {_StatusCode_MIN, false, RotationXY_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define Color_R_tag                              1
#define Color_G_tag                              2
#define Color_B_tag                              3
#define RotationXY_X_tag                         1
#define RotationXY_Y_tag                         2
#define DataFrameRequest_rgb_tag                 1
#define DataFrameRequest_frontLight_tag          2
#define DataFrameRequest_backLight_tag           3
#define DataFrameRequest_tpvMode_tag             4
#define DataFrameRequest_tpvRotationVelocity_tag 5
#define DataFrameRequest_tpvRotationAngle_tag    6
#define DataFrameResponse_status_tag             1
#define DataFrameResponse_tpvAngle_tag           2

/* Struct field encoding specification for nanopb */
#define Color_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    R,                 1) \
X(a, STATIC,   SINGULAR, FLOAT,    G,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    B,                 3)
#define Color_CALLBACK NULL
#define Color_DEFAULT NULL

#define RotationXY_FIELDLIST(X_, a) \
X_(a, STATIC,   SINGULAR, FLOAT,    X,                 1) \
X_(a, STATIC,   SINGULAR, FLOAT,    Y,                 2)
#define RotationXY_CALLBACK NULL
#define RotationXY_DEFAULT NULL

#define DataFrameRequest_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rgb,               1) \
X(a, STATIC,   SINGULAR, BOOL,     frontLight,        2) \
X(a, STATIC,   SINGULAR, BOOL,     backLight,         3) \
X(a, STATIC,   SINGULAR, UENUM,    tpvMode,           4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tpvRotationVelocity,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tpvRotationAngle,   6)
#define DataFrameRequest_CALLBACK NULL
#define DataFrameRequest_DEFAULT NULL
#define DataFrameRequest_rgb_MSGTYPE Color
#define DataFrameRequest_tpvRotationVelocity_MSGTYPE RotationXY
#define DataFrameRequest_tpvRotationAngle_MSGTYPE RotationXY

#define DataFrameResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    status,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tpvAngle,          2)
#define DataFrameResponse_CALLBACK NULL
#define DataFrameResponse_DEFAULT NULL
#define DataFrameResponse_tpvAngle_MSGTYPE RotationXY

extern const pb_msgdesc_t Color_msg;
extern const pb_msgdesc_t RotationXY_msg;
extern const pb_msgdesc_t DataFrameRequest_msg;
extern const pb_msgdesc_t DataFrameResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Color_fields &Color_msg
#define RotationXY_fields &RotationXY_msg
#define DataFrameRequest_fields &DataFrameRequest_msg
#define DataFrameResponse_fields &DataFrameResponse_msg

/* Maximum encoded size of messages (where known) */
#define BRIDGE_PB_H_MAX_SIZE                     DataFrameRequest_size
#define Color_size                               15
#define DataFrameRequest_size                    47
#define DataFrameResponse_size                   14
#define RotationXY_size                          10

#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef __cplusplus
/* Message descriptors for nanopb */
namespace nanopb {
template <>
struct MessageDescriptor<Color> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 3;
    static inline const pb_msgdesc_t* fields() {
        return &Color_msg;
    }
};
template <>
struct MessageDescriptor<RotationXY> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 2;
    static inline const pb_msgdesc_t* fields() {
        return &RotationXY_msg;
    }
};
template <>
struct MessageDescriptor<DataFrameRequest> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 6;
    static inline const pb_msgdesc_t* fields() {
        return &DataFrameRequest_msg;
    }
};
template <>
struct MessageDescriptor<DataFrameResponse> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 2;
    static inline const pb_msgdesc_t* fields() {
        return &DataFrameResponse_msg;
    }
};
}  // namespace nanopb

#endif  /* __cplusplus */


#endif
